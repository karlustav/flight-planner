//repository/SeatRepository.java
package com.example.flight_planner.repository;

import com.example.flight_planner.model.Seat;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface SeatRepository extends JpaRepository<Seat, Long> { // Change to Long
    List<Seat> findByFlightId(Long flightId); // Fetch seats for a specific flight
}

//repository/FlightRepository.java
package com.example.flight_planner.repository;

import com.example.flight_planner.model.Flight;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface FlightRepository extends JpaRepository<Flight, Long> {
    List<Flight> findByOriginAndDestination(String origin, String destination);
}


//config/SwaggerConfig.java
package com.example.flight_planner.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Flight Planner API")
                        .version("1.0")
                        .description("API documentation for the Flight Planner application"));
    }
}

//controller/SeatController.java
package com.example.flight_planner.controller;

import com.example.flight_planner.model.Seat;
import com.example.flight_planner.service.SeatService;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api/seats")
public class SeatController {

    private final SeatService seatService;

    public SeatController(SeatService seatService) {
        this.seatService = seatService;
    }

    @GetMapping
    public List<Seat> getAllSeats() {
        return seatService.getAllSeats();
    }

    @GetMapping("/flight/{flightId}")
    public List<Seat> getSeatsByFlight(@PathVariable Long flightId) {
        return seatService.getSeatsByFlight(flightId);
    }

    /**
     * Returns a list of recommended seats. If passengerCount == 1,
     * we filter by window/legroom/nearExit. If passengerCount > 1,
     * we ignore those preferences and look for adjacent seats in the same row.
     */
    @GetMapping("/recommend")
    public List<Seat> recommendSeats(
            @RequestParam Long flightId,
            @RequestParam(defaultValue = "1") int passengerCount,
            @RequestParam(defaultValue = "") String excluded,
            @RequestParam(defaultValue = "false") boolean window,
            @RequestParam(defaultValue = "false") boolean legroom,
            @RequestParam(defaultValue = "false") boolean nearExit
    ) {
        // Convert comma-separated string of excluded seats into a list
        List<String> excludedList = Arrays.stream(excluded.split(","))
                .filter(s -> !s.isEmpty())
                .collect(Collectors.toList());

        return seatService.recommendSeats(
                flightId,
                passengerCount,
                excludedList,
                window,
                legroom,
                nearExit
        );
    }
}

//controller/HomeController.java
package com.example.flight_planner.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {
    @GetMapping("/")
    public String home() {
        return "index"; // Otsib src/main/resources/templates/index.html
    }
}


//controller/FlightController.java
package com.example.flight_planner.controller;

import com.example.flight_planner.model.Flight;
import com.example.flight_planner.service.FlightService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api/flights") 
public class FlightController {
    
    private final FlightService flightService;

    public FlightController(FlightService flightService) {
        this.flightService = flightService;
    }

    @GetMapping
    public List<Flight> getAllFlights() {
        return flightService.getAllFlights();
    }

    @GetMapping("/{id}")
    public Flight getFlightById(@PathVariable Long id) {
        return flightService.getFlightById(id);
    }
}

//model/Seat.java
package com.example.flight_planner.model;

import jakarta.persistence.*;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonIgnore;

@Entity
@Table(name = "seats")
public class Seat implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id; // Unique identifier for each seat entry

    @Column(nullable = false)
    private String seatNumber;  // Seat label (e.g., "A1")
    
    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY) // Many seats belong to one flight
    @JoinColumn(name = "flight_id", nullable = false)
    private Flight flight;
    
    private boolean isAvailable;
    private boolean isWindow;
    private boolean hasExtraLegroom;
    private boolean isNearExit;

    // Default constructor for JPA
    public Seat() {}

    public Seat(String seatNumber, Flight flight, boolean isAvailable, boolean isWindow, boolean hasExtraLegroom, boolean isNearExit) {
        this.seatNumber = seatNumber;
        this.flight = flight;
        this.isAvailable = isAvailable;
        this.isWindow = isWindow;
        this.hasExtraLegroom = hasExtraLegroom;
        this.isNearExit = isNearExit;
    }

    public Long getId() { return id; }
    public String getSeatNumber() { return seatNumber; }
    public Flight getFlight() { return flight; }
    public boolean isAvailable() { return isAvailable; }
    public boolean isWindow() { return isWindow; }
    public boolean hasExtraLegroom() { return hasExtraLegroom; }
    public boolean isNearExit() { return isNearExit; }

    public void setFlight(Flight flight) {
        this.flight = flight;
    }
    
}

//model/Flight.java
package com.example.flight_planner.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
public class Flight {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String company;
    private String origin;
    private String destination;
    private LocalDateTime departureTime;
    private double price;

    @OneToMany(mappedBy = "flight", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Seat> seats = new ArrayList<>(); // Initialize to prevent NullPointerException

    // Default constructor (required for JPA)
    public Flight() {}

    public Flight(String company, String origin, String destination, LocalDateTime departureTime, double price) {
        this.company = company;
        this.origin = origin;
        this.destination = destination;
        this.departureTime = departureTime;
        this.price = price;
    }

    public Long getId() { return id; }
    public String getCompany() { return company; }
    public String getOrigin() { return origin; }
    public String getDestination() { return destination; }
    public LocalDateTime getDepartureTime() { return departureTime; }
    public double getPrice() { return price; }
    public List<Seat> getSeats() { return seats; }

    public void addSeat(Seat seat) {
        seats.add(seat);
        seat.setFlight(this); // Ensure the relationship is maintained
    }
}

//service/FlightDataLoader.java
package com.example.flight_planner.service;

import com.example.flight_planner.model.Flight;
import com.example.flight_planner.model.Seat;
import com.example.flight_planner.repository.FlightRepository;
import com.example.flight_planner.repository.SeatRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Random;

@Component
public class FlightDataLoader implements CommandLineRunner {

    private final FlightRepository flightRepository;
    private final SeatRepository seatRepository;
    private final Random random = new Random(); // Create a Random instance

    public FlightDataLoader(FlightRepository flightRepository, SeatRepository seatRepository) {
        this.flightRepository = flightRepository;
        this.seatRepository = seatRepository;
    }

    @Override
    public void run(String... args) {
        if (flightRepository.count() == 0) { // Only load if the database is empty
            List<Flight> sampleFlights = List.of(
                new Flight("Finnair", "Tallinn", "London", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Turkish Airlines", "Paris", "Berlin", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Lufthansa", "New York", "Los Angeles", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Ryanair", "Tokyo", "Seoul", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Ryanair", "Tallinn", "Helsinki", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Lufthansa", "Tallinn", "Sydney", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Finnair", "Tallinn", "Tokyo", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Ryanair", "Tallinn", "Stockholm", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Turkish Airlines", "Tallinn", "Dubai", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Finnair", "Tallinn", "New York", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Lufthansa", "Tallinn", "Madrid", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Turkish Airlines", "Tallinn", "Los Angeles", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Ryanair", "Tallinn", "London", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Finnair", "Tallinn", "Berlin", generateRandomDate(), Math.round(Math.random() * 400 + 50)),
                new Flight("Lufthansa", "Tallinn", "Seoul", generateRandomDate(), Math.round(Math.random() * 400 + 50))
            );

            flightRepository.saveAll(sampleFlights);
            
            // Generate seats for each flight
            for (Flight flight : sampleFlights) {
                double takenAmount = Math.random() * 0.4 + 0.3;
                for (int row = 1; row <= 15; row++) {
                    for (char letter : new char[]{'A', 'B', 'C', 'D', 'E', 'F'}) {
                        seatRepository.save(new Seat(
                                letter + String.valueOf(row),
                                flight,
                                Math.random() > takenAmount, // 30% to 70% of seats are taken already
                                letter == 'A' || letter == 'F', // Window seat
                                row % 5 == 1,  // Extra legroom
                                row <= 2 || row >= 13 // Near exit
                        ));
                    }
                }
            }
            System.out.println("Sample flight data and seats loaded.");
        }
    }

    // Generate a random departure date within the next 2 months at a random half-hour time
    private LocalDateTime generateRandomDate() {
        int daysToAdd = random.nextInt(60) + 1; // Random number of days (1-60)
        int hour = random.nextInt(24); // Random hour (0-23)
        int minute = random.nextBoolean() ? 0 : 30; // Either 00 or 30 minutes

        return LocalDateTime.now()
                .plusDays(daysToAdd)
                .withHour(hour)
                .withMinute(minute)
                .withSecond(0)
                .withNano(0);
    }
}

//service/FlightService.java
package com.example.flight_planner.service;

import com.example.flight_planner.model.Flight;
import com.example.flight_planner.repository.FlightRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class FlightService {
    
    private final FlightRepository flightRepository;

    public FlightService(FlightRepository flightRepository) {
        this.flightRepository = flightRepository;
    }

    public List<Flight> getAllFlights() {
        return flightRepository.findAll();
    }

    public Flight getFlightById(Long id) {
        return flightRepository.findById(id).orElse(null);
    }
}

//service/SeatService.java
package com.example.flight_planner.service;

import com.example.flight_planner.model.Seat;
import com.example.flight_planner.repository.SeatRepository;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class SeatService {

    private final SeatRepository seatRepository;

    public SeatService(SeatRepository seatRepository) {
        this.seatRepository = seatRepository;
    }

    public List<Seat> getAllSeats() {
        return seatRepository.findAll();
    }

    public List<Seat> getSeatsByFlight(Long flightId) {
        return seatRepository.findByFlightId(flightId);
    }

    /**
     * If passengerCount == 1, apply preferences.
     * If passengerCount > 1, ignore preferences and find a block of adjacent seats.
     * 
     * "Adjacent" here means same row with consecutive letters (e.g., A1, B1).
     */
    public List<Seat> recommendSeats(Long flightId,
                                     int passengerCount,
                                     List<String> excludedSeatNumbers,
                                     boolean window,
                                     boolean legroom,
                                     boolean nearExit) {

        // 1) Get available seats for this flight, excluding seats the user already selected
        List<Seat> seats = seatRepository.findByFlightId(flightId).stream()
                .filter(Seat::isAvailable)
                .filter(s -> !excludedSeatNumbers.contains(s.getSeatNumber()))
                .collect(Collectors.toList());

        // 2) If only 1 passenger, apply preferences
        if (passengerCount == 1) {
            Optional<Seat> seatOpt = seats.stream()
                    .filter(s -> !window   || s.isWindow())
                    .filter(s -> !legroom || s.hasExtraLegroom())
                    .filter(s -> !nearExit|| s.isNearExit())
                    .findFirst();

            return seatOpt
                    .map(Collections::singletonList)
                    .orElse(Collections.emptyList());
        }

        // 3) For multiple passengers, ignore window/legroom/nearExit
        //    and look for a block of 'passengerCount' adjacent seats in the same row
        //    (Assumes seatNumber format like "A10" => letter + row number).
        Map<Integer, List<Seat>> seatsByRow = seats.stream()
                .collect(Collectors.groupingBy(seat -> {
                    // Extract row from seatNumber (e.g. "B12" => row 12)
                    String rowPart = seat.getSeatNumber().substring(1);
                    return Integer.parseInt(rowPart);
                }));

        for (Map.Entry<Integer, List<Seat>> entry : seatsByRow.entrySet()) {
            List<Seat> rowSeats = entry.getValue();

            // Sort by seat letter
            rowSeats.sort(Comparator.comparingInt(s -> s.getSeatNumber().charAt(0)));

            // Attempt to find a block of 'passengerCount' consecutive letters
            for (int i = 0; i <= rowSeats.size() - passengerCount; i++) {
                boolean blockFound = true;
                List<Seat> block = new ArrayList<>();
                block.add(rowSeats.get(i));

                for (int j = 1; j < passengerCount; j++) {
                    char prevLetter = rowSeats.get(i + j - 1).getSeatNumber().charAt(0);
                    char currLetter = rowSeats.get(i + j).getSeatNumber().charAt(0);
                    // If letters aren't consecutive (e.g. 'B' is charCode 66, 'A' is 65)
                    if (currLetter - prevLetter != 1) {
                        blockFound = false;
                        break;
                    }
                    block.add(rowSeats.get(i + j));
                }

                if (blockFound) {
                    return block;
                }
            }
        }

        // 4) If no row has a suitable block, return empty
        return Collections.emptyList();
    }
}

//FlightPlannerApplication.java
package com.example.flight_planner;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class FlightPlannerApplication {

	public static void main(String[] args) {
		SpringApplication.run(FlightPlannerApplication.class, args);
	}

}

//print_project.sh
#!/bin/zsh
# This script writes each file in the current directory and its subdirectories
# to an output file (default: project_debug.txt) in the following format:
#
# //relative/path/to/file
# <file contents>
#
# The output is first written to a temporary file to avoid scanning it while the script runs.
#
# Usage:
#   ./print_project.sh            # Writes to project_debug.txt
#   ./print_project.sh output.txt   # Writes to output.txt

# Use the first argument as output file or default to project_debug.txt.
output_file="${1:-project_debug.txt}"

# Create a temporary file (outside the project tree)
temp_file=$(mktemp /tmp/project_debug.XXXXXX)
echo "Writing output to temporary file: $temp_file"

# Exclude the output file by name (assuming it's in the current directory)
find . -type f ! -name "$(basename "$output_file")" -print0 | while IFS= read -r -d '' file; do
    # Remove the leading "./" for a cleaner output.
    relative="${file#./}"
    {
      echo "//${relative}"
      cat "$file"
      echo  # Blank line for separation.
    } >> "$temp_file"
done

# Move the temporary file to the desired output file.
mv "$temp_file" "$output_file"
echo "Done! Output written to $output_file"

