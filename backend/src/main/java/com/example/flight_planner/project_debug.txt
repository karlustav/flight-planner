//repository/SeatRepository.java
package com.example.flight_planner.repository;

import com.example.flight_planner.model.Seat;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface SeatRepository extends JpaRepository<Seat, Long> { // Change to Long
    List<Seat> findByFlightId(Long flightId); // Fetch seats for a specific flight
}

//repository/FlightRepository.java
package com.example.flight_planner.repository;

import com.example.flight_planner.model.Flight;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface FlightRepository extends JpaRepository<Flight, Long> {
    List<Flight> findByOriginAndDestination(String origin, String destination);
}


//config/SwaggerConfig.java
package com.example.flight_planner.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("Flight Planner API")
                        .version("1.0")
                        .description("API documentation for the Flight Planner application"));
    }
}

//controller/SeatController.java
package com.example.flight_planner.controller;

import com.example.flight_planner.model.Seat;
import com.example.flight_planner.service.SeatService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api/seats")
public class SeatController {
    private final SeatService seatService;

    public SeatController(SeatService seatService) {
        this.seatService = seatService;
    }

    @GetMapping
    public List<Seat> getAllSeats() {
        return seatService.getAllSeats();
    }

    @GetMapping("/flight/{flightId}") // NEW: Get seats by Flight ID
    public List<Seat> getSeatsByFlight(@PathVariable Long flightId) {
        return seatService.getSeatsByFlight(flightId);
    }

    @GetMapping("/recommend")
    public Seat recommendSeat(
            @RequestParam(required = false, defaultValue = "false") boolean window,
            @RequestParam(required = false, defaultValue = "false") boolean legroom,
            @RequestParam(required = false, defaultValue = "false") boolean nearExit
    ) {
        return seatService.recommendSeat(window, legroom, nearExit);
    }
}

//controller/HomeController.java
package com.example.flight_planner.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {
    @GetMapping("/")
    public String home() {
        return "index"; // Otsib src/main/resources/templates/index.html
    }
}


//controller/FlightController.java
package com.example.flight_planner.controller;

import com.example.flight_planner.model.Flight;
import com.example.flight_planner.service.FlightService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api/flights") 
public class FlightController {
    
    private final FlightService flightService;

    public FlightController(FlightService flightService) {
        this.flightService = flightService;
    }

    @GetMapping
    public List<Flight> getAllFlights() {
        return flightService.getAllFlights();
    }

    @GetMapping("/{id}")
    public Flight getFlightById(@PathVariable Long id) {
        return flightService.getFlightById(id);
    }
}

//model/Seat.java
package com.example.flight_planner.model;

import jakarta.persistence.*;
import java.io.Serializable;

@Entity
@Table(name = "seats")
public class Seat implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id; // Unique identifier for each seat entry

    @Column(nullable = false)
    private String seatNumber;  // Seat label (e.g., "A1")

    @ManyToOne(fetch = FetchType.LAZY) // Many seats belong to one flight
    @JoinColumn(name = "flight_id", nullable = false)
    private Flight flight;
    
    private boolean isAvailable;
    private boolean isWindow;
    private boolean hasExtraLegroom;
    private boolean isNearExit;

    // Default constructor for JPA
    public Seat() {}

    public Seat(String seatNumber, Flight flight, boolean isAvailable, boolean isWindow, boolean hasExtraLegroom, boolean isNearExit) {
        this.seatNumber = seatNumber;
        this.flight = flight;
        this.isAvailable = isAvailable;
        this.isWindow = isWindow;
        this.hasExtraLegroom = hasExtraLegroom;
        this.isNearExit = isNearExit;
    }

    public Long getId() { return id; }
    public String getSeatNumber() { return seatNumber; }
    public Flight getFlight() { return flight; }
    public boolean isAvailable() { return isAvailable; }
    public boolean isWindow() { return isWindow; }
    public boolean hasExtraLegroom() { return hasExtraLegroom; }
    public boolean isNearExit() { return isNearExit; }
}

//model/Flight.java
package com.example.flight_planner.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Entity
public class Flight {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String company;
    private String origin;
    private String destination;
    private LocalDateTime departureTime;
    private double price;

    @OneToMany(mappedBy = "flight", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Seat> seats = new ArrayList<>(); // Initialize to prevent NullPointerException

    // Default constructor (required for JPA)
    public Flight() {}

    public Flight(String company, String origin, String destination, LocalDateTime departureTime, double price) {
        this.company = company;
        this.origin = origin;
        this.destination = destination;
        this.departureTime = departureTime;
        this.price = price;
    }

    public Long getId() { return id; }
    public String getCompany() { return company; }
    public String getOrigin() { return origin; }
    public String getDestination() { return destination; }
    public LocalDateTime getDepartureTime() { return departureTime; }
    public double getPrice() { return price; }
    public List<Seat> getSeats() { return seats; }

    public void addSeat(Seat seat) {
        seats.add(seat);
        seat.setFlight(this); // Ensure the relationship is maintained
    }
}

//service/FlightDataLoader.java
package com.example.flight_planner.service;

import com.example.flight_planner.model.Flight;
import com.example.flight_planner.model.Seat;
import com.example.flight_planner.repository.FlightRepository;
import com.example.flight_planner.repository.SeatRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.time.LocalDateTime;
import java.util.List;

@Component
public class FlightDataLoader implements CommandLineRunner {

    private final FlightRepository flightRepository;
    private final SeatRepository seatRepository;

    public FlightDataLoader(FlightRepository flightRepository, SeatRepository seatRepository) {
        this.flightRepository = flightRepository;
        this.seatRepository = seatRepository;
    }

    @Override
    public void run(String... args) {
        if (flightRepository.count() == 0) { // Only load if the database is empty
            List<Flight> sampleFlights = List.of(
                new Flight("Airline1", "Tallinn", "London", LocalDateTime.now().plusDays(1), 120.0),
                new Flight("Airline2", "Paris", "Berlin", LocalDateTime.now().plusDays(2), 95.5),
                new Flight("Airline3", "New York", "Los Angeles", LocalDateTime.now().plusDays(3), 350.0),
                new Flight("Airline4", "Tokyo", "Seoul", LocalDateTime.now().plusDays(4), 180.0)
            );

            flightRepository.saveAll(sampleFlights);
            
            // Generate seats for each flight
            for (Flight flight : sampleFlights) {
                for (int row = 1; row <= 10; row++) {
                    for (char letter : new char[]{'A', 'B', 'C', 'D', 'E', 'F'}) {
                        seatRepository.save(new Seat(
                                letter + String.valueOf(row),
                                flight,
                                true,
                                letter == 'A' || letter == 'F', // Window seat
                                row % 5 == 1,  // Extra legroom
                                row <= 2 || row >= 9 // Near exit
                        ));
                    }
                }
            }
            System.out.println("Sample flight data and seats loaded.");
        }
    }
}

//service/FlightService.java
package com.example.flight_planner.service;

import com.example.flight_planner.model.Flight;
import com.example.flight_planner.repository.FlightRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class FlightService {
    
    private final FlightRepository flightRepository;

    public FlightService(FlightRepository flightRepository) {
        this.flightRepository = flightRepository;
    }

    public List<Flight> getAllFlights() {
        return flightRepository.findAll();
    }

    public Flight getFlightById(Long id) {
        return flightRepository.findById(id).orElse(null);
    }
}

//service/SeatService.java
package com.example.flight_planner.service;

import com.example.flight_planner.model.Seat;
import com.example.flight_planner.repository.SeatRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class SeatService {
    private final SeatRepository seatRepository;

    public SeatService(SeatRepository seatRepository) {
        this.seatRepository = seatRepository;
    }

    public List<Seat> getAllSeats() {
        return seatRepository.findAll();
    }

    public List<Seat> getSeatsByFlight(Long flightId) {
        return seatRepository.findByFlightId(flightId);
    }

    public Seat recommendSeat(boolean window, boolean legroom, boolean nearExit) {
        return seatRepository.findAll().stream()
                .filter(Seat::isAvailable)
                .filter(s -> !window || s.isWindow())  
                .filter(s -> !legroom || s.hasExtraLegroom())  
                .filter(s -> !nearExit || s.isNearExit())  
                .findFirst()
                .orElse(null);
    }
}

//FlightPlannerApplication.java
package com.example.flight_planner;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class FlightPlannerApplication {

	public static void main(String[] args) {
		SpringApplication.run(FlightPlannerApplication.class, args);
	}

}

//print_project.sh
#!/bin/zsh
# This script writes each file in the current directory and its subdirectories
# to an output file (default: project_debug.txt) in the following format:
#
# //relative/path/to/file
# <file contents>
#
# The output is first written to a temporary file to avoid scanning it while the script runs.
#
# Usage:
#   ./print_project.sh            # Writes to project_debug.txt
#   ./print_project.sh output.txt   # Writes to output.txt

# Use the first argument as output file or default to project_debug.txt.
output_file="${1:-project_debug.txt}"

# Create a temporary file (outside the project tree)
temp_file=$(mktemp /tmp/project_debug.XXXXXX)
echo "Writing output to temporary file: $temp_file"

# Exclude the output file by name (assuming it's in the current directory)
find . -type f ! -name "$(basename "$output_file")" -print0 | while IFS= read -r -d '' file; do
    # Remove the leading "./" for a cleaner output.
    relative="${file#./}"
    {
      echo "//${relative}"
      cat "$file"
      echo  # Blank line for separation.
    } >> "$temp_file"
done

# Move the temporary file to the desired output file.
mv "$temp_file" "$output_file"
echo "Done! Output written to $output_file"

