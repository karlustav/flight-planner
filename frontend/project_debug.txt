//index.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Flight Planner</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="src/styles/global.css">
</head>
<body class="index-page">
  <header>
    <nav>
      <ul>
        <li><a href="index.html" class="active">Home</a></li>
        <li><a href="flights.html">Flights</a></li>
        <li><a href="bookings.html">My Bookings</a></li>
      </ul>
    </nav>
  </header>
  <main>
    <section class="hero">
      <div class="hero-content">
        <h1>Welcome to Flight Planner</h1>
        <p>Plan your perfect flight with ease.</p>
        <a href="flights.html" class="btn">View Flights</a>
      </div>
    </section>
  </main>
  
  <footer>
    <p>&copy; 2025 Flight Planner</p>
  </footer>
  <script type="module" src="src/scripts/main.ts"></script>
</body>
</html>

//print_frontend.sh
#!/bin/zsh
# This script writes each file in the current directory and its subdirectories,
# excluding the node_modules directory and the src/images folder, to an output file 
# (default: project_debug.txt) in the following format:
#
# //relative/path/to/file
# <file contents>
#
# The output is first written to a temporary file to avoid scanning it while the script runs.
#
# Usage:
#   ./print_frontend.sh            # Writes to project_debug.txt
#   ./print_frontend.sh output.txt # Writes to output.txt

# Use the first argument as output file or default to project_debug.txt.
output_file="${1:-project_debug.txt}"

# Create a temporary file (outside the project tree)
temp_file=$(mktemp /tmp/project_debug.XXXXXX)
echo "Writing output to temporary file: $temp_file"

# Exclude the output file by name, the node_modules directory, and the src/images folder
find . \( -type d -name "node_modules" -o -path "./public" \) -prune -o \
       -type f ! -name "$(basename "$output_file")" -print0 | while IFS= read -r -d '' file; do
    # Remove the leading "./" for a cleaner output.
    relative="${file#./}"
    {
      echo "//${relative}"
      cat "$file"
      echo  # Blank line for separation.
    } >> "$temp_file"
done

# Move the temporary file to the desired output file.
mv "$temp_file" "$output_file"
echo "Done! Output written to $output_file"

//flights.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Flights</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/src/styles/global.css">
</head>
<body>
  <header>
    <nav>
      <ul>
        <li><a href="index.html">Home</a></li>
        <li><a href="flights.html" class="active">Flights</a></li>
        <li><a href="bookings.html">My Bookings</a></li>
      </ul>
    </nav>
  </header>
  <main>
    <section class="page-header">
      <h1>Available Flights</h1>
      <div class="search-bar">
        <input type="text" id="origin" placeholder="Origin">
        <input type="text" id="destination" placeholder="Destination">
        <input type="date" id="date">
        <button id="search-btn" class="btn">Search</button>
      </div>
    </section>
    <section class="table-container">
      <table id="flightsTable">
        <thead>
          <tr>
            <th>Company</th>
            <th>From</th>
            <th>To</th>
            <th>Date & Time</th>
            <th>Price</th>
            <th>Buy Tickets</th>
          </tr>
        </thead>
        <tbody>
          <!-- Flight rows will be populated dynamically -->
        </tbody>
      </table>
    </section>
  </main>
  <footer>
    <p>&copy; 2025 Flight Planner</p>
  </footer>
  <script type="module" src="/src/scripts/flights.ts"></script>
</body>
</html>

//.gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

//package-lock.json
{
  "name": "flight-planner-frontend",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "flight-planner-frontend",
      "version": "0.0.0",
      "devDependencies": {
        "typescript": "~5.7.2",
        "vite": "^6.2.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.1.tgz",
      "integrity": "sha512-kfYGy8IdzTGy+z0vFGvExZtxkFlA4zAxgKEahG9KE1ScBjpQnFsNOX8KTU5ojNru5ed5CVoJYXFtoxaq5nFbjQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.1.tgz",
      "integrity": "sha512-dp+MshLYux6j/JjdqVLnMglQlFu+MuVeNrmT5nk6q07wNhCdSnB7QZj+7G8VMUGh1q+vj2Bq8kRsuyA00I/k+Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.1.tgz",
      "integrity": "sha512-50tM0zCJW5kGqgG7fQ7IHvQOcAn9TKiVRuQ/lN0xR+T2lzEFvAi1ZcS8DiksFcEpf1t/GYOeOfCAgDHFpkiSmA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.1.tgz",
      "integrity": "sha512-GCj6WfUtNldqUzYkN/ITtlhwQqGWu9S45vUXs7EIYf+7rCiiqH9bCloatO9VhxsL0Pji+PF4Lz2XXCES+Q8hDw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.1.tgz",
      "integrity": "sha512-5hEZKPf+nQjYoSr/elb62U19/l1mZDdqidGfmFutVUjjUZrOazAtwK+Kr+3y0C/oeJfLlxo9fXb1w7L+P7E4FQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.1.tgz",
      "integrity": "sha512-hxVnwL2Dqs3fM1IWq8Iezh0cX7ZGdVhbTfnOy5uURtao5OIVCEyj9xIzemDi7sRvKsuSdtCAhMKarxqtlyVyfA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.1.tgz",
      "integrity": "sha512-1MrCZs0fZa2g8E+FUo2ipw6jw5qqQiH+tERoS5fAfKnRx6NXH31tXBKI3VpmLijLH6yriMZsxJtaXUyFt/8Y4A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.1.tgz",
      "integrity": "sha512-0IZWLiTyz7nm0xuIs0q1Y3QWJC52R8aSXxe40VUxm6BB1RNmkODtW6LHvWRrGiICulcX7ZvyH6h5fqdLu4gkww==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.1.tgz",
      "integrity": "sha512-NdKOhS4u7JhDKw9G3cY6sWqFcnLITn6SqivVArbzIaf3cemShqfLGHYMx8Xlm/lBit3/5d7kXvriTUGa5YViuQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.1.tgz",
      "integrity": "sha512-jaN3dHi0/DDPelk0nLcXRm1q7DNJpjXy7yWaWvbfkPvI+7XNSc/lDOnCLN7gzsyzgu6qSAmgSvP9oXAhP973uQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.1.tgz",
      "integrity": "sha512-OJykPaF4v8JidKNGz8c/q1lBO44sQNUQtq1KktJXdBLn1hPod5rE/Hko5ugKKZd+D2+o1a9MFGUEIUwO2YfgkQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.1.tgz",
      "integrity": "sha512-nGfornQj4dzcq5Vp835oM/o21UMlXzn79KobKlcs3Wz9smwiifknLy4xDCLUU0BWp7b/houtdrgUz7nOGnfIYg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.1.tgz",
      "integrity": "sha512-1osBbPEFYwIE5IVB/0g2X6i1qInZa1aIoj1TdL4AaAb55xIIgbg8Doq6a5BzYWgr+tEcDzYH67XVnTmUzL+nXg==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.1.tgz",
      "integrity": "sha512-/6VBJOwUf3TdTvJZ82qF3tbLuWsscd7/1w+D9LH0W/SqUgM5/JJD0lrJ1fVIfZsqB6RFmLCe0Xz3fmZc3WtyVg==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.1.tgz",
      "integrity": "sha512-nSut/Mx5gnilhcq2yIMLMe3Wl4FK5wx/o0QuuCLMtmJn+WeWYoEGDN1ipcN72g1WHsnIbxGXd4i/MF0gTcuAjQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.1.tgz",
      "integrity": "sha512-cEECeLlJNfT8kZHqLarDBQso9a27o2Zd2AQ8USAEoGtejOrCYHNtKP8XQhMDJMtthdF4GBmjR2au3x1udADQQQ==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.1.tgz",
      "integrity": "sha512-xbfUhu/gnvSEg+EGovRc+kjBAkrvtk38RlerAzQxvMzlB4fXpCFCeUAYzJvrnhFtdeyVCDANSjJvOvGYoeKzFA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.1.tgz",
      "integrity": "sha512-O96poM2XGhLtpTh+s4+nP7YCCAfb4tJNRVZHfIE7dgmax+yMP2WgMd2OecBuaATHKTHsLWHQeuaxMRnCsH8+5g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.1.tgz",
      "integrity": "sha512-X53z6uXip6KFXBQ+Krbx25XHV/NCbzryM6ehOAeAil7X7oa4XIq+394PWGnwaSQ2WRA0KI6PUO6hTO5zeF5ijA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.1.tgz",
      "integrity": "sha512-Na9T3szbXezdzM/Kfs3GcRQNjHzM6GzFBeU1/6IV/npKP5ORtp9zbQjvkDJ47s6BCgaAZnnnu/cY1x342+MvZg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.1.tgz",
      "integrity": "sha512-T3H78X2h1tszfRSf+txbt5aOp/e7TAz3ptVKu9Oyir3IAOFPGV6O9c2naym5TOriy1l0nNf6a4X5UXRZSGX/dw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.1.tgz",
      "integrity": "sha512-2H3RUvcmULO7dIE5EWJH8eubZAI4xw54H1ilJnRNZdeo8dTADEZ21w6J22XBkXqGJbe0+wnNJtw3UXRoLJnFEg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.1.tgz",
      "integrity": "sha512-GE7XvrdOzrb+yVKB9KsRMq+7a2U/K5Cf/8grVFRAGJmfADr/e/ODQ134RK2/eeHqYV5eQRFxb1hY7Nr15fv1NQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.1.tgz",
      "integrity": "sha512-uOxSJCIcavSiT6UnBhBzE8wy3n0hOkJsBOzy7HDAuTDE++1DJMRRVCPGisULScHL+a/ZwdXPpXD3IyFKjA7K8A==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.1.tgz",
      "integrity": "sha512-Y1EQdcfwMSeQN/ujR5VayLOJ1BHaK+ssyk0AEzPjC+t1lITgsnccPqFjb6V+LsTp/9Iov4ysfjxLaGJ9RPtkVg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.35.0.tgz",
      "integrity": "sha512-uYQ2WfPaqz5QtVgMxfN6NpLD+no0MYHDBywl7itPYd3K5TjjSghNKmX8ic9S8NU8w81NVhJv/XojcHptRly7qQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.35.0.tgz",
      "integrity": "sha512-FtKddj9XZudurLhdJnBl9fl6BwCJ3ky8riCXjEw3/UIbjmIY58ppWwPEvU3fNu+W7FUsAsB1CdH+7EQE6CXAPA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.35.0.tgz",
      "integrity": "sha512-Uk+GjOJR6CY844/q6r5DR/6lkPFOw0hjfOIzVx22THJXMxktXG6CbejseJFznU8vHcEBLpiXKY3/6xc+cBm65Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.35.0.tgz",
      "integrity": "sha512-3IrHjfAS6Vkp+5bISNQnPogRAW5GAV1n+bNCrDwXmfMHbPl5EhTmWtfmwlJxFRUCBZ+tZ/OxDyU08aF6NI/N5Q==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.35.0.tgz",
      "integrity": "sha512-sxjoD/6F9cDLSELuLNnY0fOrM9WA0KrM0vWm57XhrIMf5FGiN8D0l7fn+bpUeBSU7dCgPV2oX4zHAsAXyHFGcQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.35.0.tgz",
      "integrity": "sha512-2mpHCeRuD1u/2kruUiHSsnjWtHjqVbzhBkNVQ1aVD63CcexKVcQGwJ2g5VphOd84GvxfSvnnlEyBtQCE5hxVVw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.35.0.tgz",
      "integrity": "sha512-mrA0v3QMy6ZSvEuLs0dMxcO2LnaCONs1Z73GUDBHWbY8tFFocM6yl7YyMu7rz4zS81NDSqhrUuolyZXGi8TEqg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.35.0.tgz",
      "integrity": "sha512-DnYhhzcvTAKNexIql8pFajr0PiDGrIsBYPRvCKlA5ixSS3uwo/CWNZxB09jhIapEIg945KOzcYEAGGSmTSpk7A==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.35.0.tgz",
      "integrity": "sha512-uagpnH2M2g2b5iLsCTZ35CL1FgyuzzJQ8L9VtlJ+FckBXroTwNOaD0z0/UF+k5K3aNQjbm8LIVpxykUOQt1m/A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.35.0.tgz",
      "integrity": "sha512-XQxVOCd6VJeHQA/7YcqyV0/88N6ysSVzRjJ9I9UA/xXpEsjvAgDTgH3wQYz5bmr7SPtVK2TsP2fQ2N9L4ukoUg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.35.0.tgz",
      "integrity": "sha512-5pMT5PzfgwcXEwOaSrqVsz/LvjDZt+vQ8RT/70yhPU06PTuq8WaHhfT1LW+cdD7mW6i/J5/XIkX/1tCAkh1W6g==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.35.0.tgz",
      "integrity": "sha512-c+zkcvbhbXF98f4CtEIP1EBA/lCic5xB0lToneZYvMeKu5Kamq3O8gqrxiYYLzlZH6E3Aq+TSW86E4ay8iD8EA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.35.0.tgz",
      "integrity": "sha512-s91fuAHdOwH/Tad2tzTtPX7UZyytHIRR6V4+2IGlV0Cej5rkG0R61SX4l4y9sh0JBibMiploZx3oHKPnQBKe4g==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.35.0.tgz",
      "integrity": "sha512-hQRkPQPLYJZYGP+Hj4fR9dDBMIM7zrzJDWFEMPdTnTy95Ljnv0/4w/ixFw3pTBMEuuEuoqtBINYND4M7ujcuQw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.35.0.tgz",
      "integrity": "sha512-Pim1T8rXOri+0HmV4CdKSGrqcBWX0d1HoPnQ0uw0bdp1aP5SdQVNBy8LjYncvnLgu3fnnCt17xjWGd4cqh8/hA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.35.0.tgz",
      "integrity": "sha512-QysqXzYiDvQWfUiTm8XmJNO2zm9yC9P/2Gkrwg2dH9cxotQzunBHYr6jk4SujCTqnfGxduOmQcI7c2ryuW8XVg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.35.0.tgz",
      "integrity": "sha512-OUOlGqPkVJCdJETKOCEf1mw848ZyJ5w50/rZ/3IBQVdLfR5jk/6Sr5m3iO2tdPgwo0x7VcncYuOvMhBWZq8ayg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.35.0.tgz",
      "integrity": "sha512-2/lsgejMrtwQe44glq7AFFHLfJBPafpsTa6JvP2NGef/ifOa4KBoglVf7AKN7EV9o32evBPRqfg96fEHzWo5kw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.35.0.tgz",
      "integrity": "sha512-PIQeY5XDkrOysbQblSW7v3l1MDZzkTEzAfTPkj5VAu3FW8fS4ynyLg2sINp0fp3SjZ8xkRYpLqoKcYqAkhU1dw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/estree": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.6.tgz",
      "integrity": "sha512-AYnb1nQyY49te+VRAVgmzfcgjYS91mY5P0TKUDCLEM+gNnA+3T6rWITXRLYCpahpqSQbN5cE+gHpnPyXjHWxcw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/esbuild": {
      "version": "0.25.1",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.1.tgz",
      "integrity": "sha512-BGO5LtrGC7vxnqucAe/rmvKdJllfGaYWdyABvyMoXQlfYMb2bbRuReWR5tEGE//4LcNJj9XrkovTqNYRFZHAMQ==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.1",
        "@esbuild/android-arm": "0.25.1",
        "@esbuild/android-arm64": "0.25.1",
        "@esbuild/android-x64": "0.25.1",
        "@esbuild/darwin-arm64": "0.25.1",
        "@esbuild/darwin-x64": "0.25.1",
        "@esbuild/freebsd-arm64": "0.25.1",
        "@esbuild/freebsd-x64": "0.25.1",
        "@esbuild/linux-arm": "0.25.1",
        "@esbuild/linux-arm64": "0.25.1",
        "@esbuild/linux-ia32": "0.25.1",
        "@esbuild/linux-loong64": "0.25.1",
        "@esbuild/linux-mips64el": "0.25.1",
        "@esbuild/linux-ppc64": "0.25.1",
        "@esbuild/linux-riscv64": "0.25.1",
        "@esbuild/linux-s390x": "0.25.1",
        "@esbuild/linux-x64": "0.25.1",
        "@esbuild/netbsd-arm64": "0.25.1",
        "@esbuild/netbsd-x64": "0.25.1",
        "@esbuild/openbsd-arm64": "0.25.1",
        "@esbuild/openbsd-x64": "0.25.1",
        "@esbuild/sunos-x64": "0.25.1",
        "@esbuild/win32-arm64": "0.25.1",
        "@esbuild/win32-ia32": "0.25.1",
        "@esbuild/win32-x64": "0.25.1"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.10",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.10.tgz",
      "integrity": "sha512-vSJJTG+t/dIKAUhUDw/dLdZ9s//5OxcHqLaDWWrW4Cdq7o6tdLIczUkMXt2MBNmk6sJRZBZRXVixs7URY1CmIg==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.5.3",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
      "integrity": "sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.8",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/rollup": {
      "version": "4.35.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.35.0.tgz",
      "integrity": "sha512-kg6oI4g+vc41vePJyO6dHt/yl0Rz3Thv0kJeVQ3D1kS3E5XSuKbPc29G4IpT/Kv1KQwgHVcN+HtyS+HYLNSvQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.6"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.35.0",
        "@rollup/rollup-android-arm64": "4.35.0",
        "@rollup/rollup-darwin-arm64": "4.35.0",
        "@rollup/rollup-darwin-x64": "4.35.0",
        "@rollup/rollup-freebsd-arm64": "4.35.0",
        "@rollup/rollup-freebsd-x64": "4.35.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.35.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.35.0",
        "@rollup/rollup-linux-arm64-gnu": "4.35.0",
        "@rollup/rollup-linux-arm64-musl": "4.35.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.35.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.35.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.35.0",
        "@rollup/rollup-linux-s390x-gnu": "4.35.0",
        "@rollup/rollup-linux-x64-gnu": "4.35.0",
        "@rollup/rollup-linux-x64-musl": "4.35.0",
        "@rollup/rollup-win32-arm64-msvc": "4.35.0",
        "@rollup/rollup-win32-ia32-msvc": "4.35.0",
        "@rollup/rollup-win32-x64-msvc": "4.35.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.7.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.3.tgz",
      "integrity": "sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/vite": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/vite/-/vite-6.2.2.tgz",
      "integrity": "sha512-yW7PeMM+LkDzc7CgJuRLMW2Jz0FxMOsVJ8Lv3gpgW9WLcb9cTW+121UEr1hvmfR7w3SegR5ItvYyzVz1vxNJgQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "postcss": "^8.5.3",
        "rollup": "^4.30.1"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "jiti": ">=1.21.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    }
  }
}

//package.json
{
  "name": "flight-planner-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "devDependencies": {
    "typescript": "~5.7.2",
    "vite": "^6.2.0"
  }
}

//bookings.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Your Bookings</title>
  <link rel="stylesheet" href="src/styles/global.css">
  <link rel="stylesheet" href="src/styles/bookings.css">
</head>
<body>
  <header>
    <nav>
      <ul>
        <li><a href="index.html">Home</a></li>
        <li><a href="flights.html">Flights</a></li>
        <li><a href="bookings.html" class="active">My Bookings</a></li>
      </ul>
    </nav>
  </header>
  <main>
    <div id="bookingsContainer" class="bookings-container"></div>
  </main>
  <footer>
    <p>&copy; 2025 Flight Planner</p>
  </footer>
  <!-- Add the script that renders the boarding passes -->
  <script type="module" src="src/scripts/bookings.ts"></script>
</body>
</html>

//tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src", "src/scripts", "src/api"]
}

//vite.config.ts
import { defineConfig } from "vite";

export default defineConfig({
  server: {
    proxy: {
      "/api": {
        target: "http://localhost:8080",
        changeOrigin: true,
        secure: false
      },
      "/seats": {
        target: "http://localhost:8080",
        changeOrigin: true,
        secure: false
      }
    }
  }
});

//flight.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Flight Details</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="src/styles/global.css">
  <link rel="stylesheet" href="src/styles/seats.css">
</head>
<body>
  <header>
    <nav>
      <ul>
        <li><a href="index.html">Home</a></li>
        <li><a href="flights.html">Flights</a></li>
        <li><a href="bookings.html">My Bookings</a></li>
      </ul>
    </nav>
  </header>
  
  <main class="flight-container">
    <!-- Left: Flight Info (Sticky) -->
    <section class="flight-info">
      <h1 id="flightTitle">Loading flight...</h1>
      <p><strong>From:</strong> <span id="flightOrigin"></span></p>
      <p><strong>To:</strong> <span id="flightDestination"></span></p>
      <p><strong>Departure:</strong> <span id="flightTime"></span></p>
      <p><strong>Base Price:</strong> $<span id="flightPrice"></span></p>
      <p><strong id="total-price">Total Price:</strong> $<span id="totalPrice">0</span></p>
      <button id="confirm-and-buy" class="btn"> Confirm Booking</button>
    </section>
  
    <!-- Center: Seat Map -->
    <section class="seat-selection-container">
      <div class="plane-background">
        <h2>Select Your Seats</h2>
        <div id="seatContainer"></div>
      </div>
    </section>

    <!-- Right: Recommend Seat Button (Sticky) -->
    <section class="recommendation-panel">
      <h2>Seat Recommendation</h2>
      
      <div id="recommendationError" class="error-banner"></div>

      <label for="passengerCount">Passengers:</label>
      <select id="passengerCount">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
      </select>
      <strong>Select Preferences:</strong>
      <div class="preferences">
        <label><input type="checkbox" id="pref-window" value="window"> Window Seat</label>
        <label><input type="checkbox" id="pref-legroom" value="legroom"> Extra Legroom</label>
        <label><input type="checkbox" id="pref-exit" value="exit"> Near Exit</label>
      </div>
      
      <button id="recommend-seat-btn" class="btn">Recommend Seat</button>
    </section>
  </main>
  
  <footer>
    <p>&copy; 2025 Flight Planner</p>
  </footer>
  <script type="module" src="src/scripts/seatSelection.ts"></script>
</body>
</html>

//src/styles/seats.css
/* Modern Header Styling */
header {
    background: linear-gradient(to right, #1e3a8a, #2563eb);
    padding: 1rem;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

header nav ul {
    list-style: none;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2rem;
    margin: 0;
    padding: 0;
}

header nav ul li a {
    color: #fff;
    text-decoration: none;
    font-weight: 600;
    padding: 0.5rem 1rem;
    transition: background 0.3s ease, color 0.3s ease;
}

header nav ul li a:hover,
header nav ul li a.active {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
}

/* Main Layout */
.flight-container {
    display: flex;
    justify-content: space-between;
    gap: 2rem;
    padding: 2rem;
}

/* Make Flight Info and Recommend Seat sticky */
.flight-info, .recommendation-panel {
    width: 25%;
    position: sticky;
    top: 25px;
    margin-top: 25px;
    align-self: flex-start;
}

/* Flight Info Box */
.flight-info {
    background: #f1f1f1;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.btn {
    padding: 1rem 2rem;
    margin-top: 20px;
    border: none;
    background: #1e3a8a;
    color: #fff;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s ease;
  }

.btn:hover {
    background: #163172;
}

/* Seat Selection */
.seat-selection-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 50%;
}

/* Plane Background */
.plane-background {
    background: rgba(160, 209, 248, 0.2);
    border-radius: 60px;
    padding: 30px 20px;
    margin: 0 auto;
    max-width: 600px;
    text-align: center;
}

/* Seat Container */
#seatContainer {
    display: flex;
    flex-direction: column;
    gap: 20px;
    max-width: 600px;
    margin: 0 auto;
}

/* Seat Row */
.seat-row {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 20px;
    flex-wrap: nowrap;
}

/* Left & Right Sections */
.seat-section {
    display: flex;
    gap: 10px;
}

/* Aisle */
.aisle {
    width: 30px;
}

/* Seat Styling */
.seat {
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #e0e0e0;
    border: 1px solid #ccc;
    border-radius: 10px;
    cursor: pointer;
    transition: background 0.3s ease, transform 0.3s ease;
    text-align: center;
}

.seat:hover {
    background: #b3e5fc;
    transform: translateY(-3px);
}

.seat.available {
    background: #8bc34a;
    color: #fff;
}

.seat.booked {
    background: #e57373;
    color: #fff;
    cursor: not-allowed;
}

/* Selected Seat */
.seat.selected {
    background:  #ffc107;
}

/* Extra spacing every 5 rows */
.seat-row:nth-child(5n) {
    margin-bottom: 30px;
}

/* Container Layout */
.flight-container {
    display: flex;
    justify-content: space-between;
    gap: 2rem;
    padding: 2rem;
}

/* Flight Info & Recommendation Panel Background */
.flight-info, .recommendation-panel {
    width: 25%;
    padding: 1.5rem;
    background: #f1f1f1;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 10px;
}

/* Seat Selection Container */
.seat-selection-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 50%;
}

/* Plane Background */
.plane-background {
    background: rgba(160, 209, 248, 0.2);
    border-radius: 60px;
    padding: 30px 20px;
    margin: 0 auto;
    max-width: 600px;
    text-align: center;
}

/* Seat Recommendation Panel */
.recommendation-panel {
    width: 25%;
    text-align: left;
}

/* Preferences Section */
.preferences {
    display: flex;
    flex-direction: column;
    gap: 5px;
    margin: 10px 0;
}

.preferences label {
    display: flex;
    align-items: center;
    gap: 8px;
    font-size: 1rem;
}

.preferences input[type="checkbox"] {
    transform: scale(1.2);
    cursor: pointer;
}

/* Recommend Seat Button */
#recommend-seat-btn {
    display: block;
    background: #ffcd38;
    color: #1e3a8a;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
    width: 100%;
    text-align: center;
    margin-top: 10px;
}

#recommend-seat-btn:hover {
    background: #ffc107;
}

@keyframes recommended-flash {
    0%   { background-color: #8bc34a; } /* your .available color */
    50%  { background-color: #ffc107; } /* your .selected color */
    100% { background-color: #8bc34a; }
  }
  
  .seat.recommended {
    animation: recommended-flash 1s infinite; 
    /* You could also set a border or box-shadow if you want more emphasis */
    box-shadow: 0 0 5px #ffc107;
  }
  
  /* Modernize the recommendation panel */
.recommendation-panel {
    width: 25%;
    background: #fff; /* White for a clean card-like look */
    padding: 1.5rem;
    margin-top: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 10px;
  }
  
  /* Headline styling */
  .recommendation-panel h2 {
    margin-bottom: 1rem;
    font-size: 1.4rem;
    color: #1e3a8a;
  }
  
  /* Label & select styling */
  .recommendation-panel label,
  .recommendation-panel strong {
    font-weight: 500;
    margin-bottom: 0.5rem;
    display: block;
  }
  
  .recommendation-panel select {
    width: 100%;
    padding: 0.5rem;
    margin-bottom: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    font: inherit;
    outline: none;
  }
  
  /* Preferences checkboxes container */
  .preferences {
    margin-bottom: 1rem;
  }
  
  /* Each preference label */
  .preferences label {
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    cursor: pointer;
    font-size: 0.95rem;
  }
  
  .preferences input[type="checkbox"] {
    margin-right: 0.5rem;
    transform: scale(1.2);
    cursor: pointer;
  }
  
  /* Modern button styling */
  #recommend-seat-btn {
    display: block;
    width: 100%;
    text-align: center;
    background: #1e3a8a;
    color: #fff;
    padding: 0.75rem 1.25rem;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    transition: background 0.3s ease;
    border: none;
  }
  
  #recommend-seat-btn:hover {
    background: #163172;
  }
  
/* Error banner inside the recommendation panel */
.error-banner {
    display: none;                 /* Hidden by default */
    background-color: #ff4d4f;     /* Red background */
    color: #fff;                   /* White text */
    padding: 0.75rem 1rem;
    margin-bottom: 1rem;           /* Space below the banner */
    border-radius: 4px;            /* Slightly rounded corners */
    font-weight: 500;              /* Bold text */
    text-align: center;            /* Center the text */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .error-banner.visible {
    display: block;               /* Show when .visible is added */
  }
  
//src/styles/global.css
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap');

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: 'Roboto', sans-serif;
  background: #f9f9fb;
  color: #333;
  line-height: 1.6;
  padding-bottom: 80px;
}

/* Header & Navigation */
header {
  background: #1e3a8a;
  padding: 1rem 0;
  color: #fff;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  
}

nav ul {
  display: flex;
  justify-content: center;
  list-style: none;
}

nav ul li {
  margin: 0 1rem;
}

nav ul li a {
  color: #fff;
  text-decoration: none;
  font-weight: 500;
  padding: 0.5rem;
  transition: color 0.3s ease;
}

nav ul li a:hover,
nav ul li a.active {
  color: #ffcd38;
}

/* Main Content */
main {
  padding: 2rem;
}

/* Footer */
footer {
  text-align: center;
  padding: 1rem 0;
  background: #1e3a8a;
  color: #fff;
  position: fixed;
  bottom: 0;
  width: 100%;
}

/* Hero Section (Index) */
.hero {
  text-align: center;
  padding: 4rem 2rem;
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.hero-content {
  background: rgba(0, 0, 0, 0.6); /* Dark semi-transparent background */
  padding: 2rem;
  border-radius: 10px;
  color: white;
  max-width: 600px;
  text-align: center;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
}

.hero h1 {
  font-size: 2.5rem;
  margin-bottom: 1rem;
}

.hero p {
  font-size: 1.2rem;
  margin-bottom: 2rem;
}

.index-page {
  background-image: url('../../vanalinn.jpg'); /* Adjust path if needed */
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  height: 100vh;
}


/* Button Styling */
.btn {
  display: inline-block;
  background: #ffcd38;
  color: #1e3a8a;
  padding: 0.75rem 1.5rem;
  border-radius: 4px;
  text-decoration: none;
  font-weight: 500;
  transition: background 0.3s ease;
}

.btn:hover {
  background: #ffc107;
}

/* Page Header (Flights) */
.page-header {
  margin-bottom: 2rem;
  text-align: center;
}

.page-header h1 {
  margin-bottom: 1rem;
  font-size: 2rem;
}

/* Search Bar */
.search-bar {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-bottom: 2rem;
  flex-wrap: wrap;
}

.search-bar input[type="text"],
.search-bar input[type="time"] {
  padding: 0.5rem;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 200px;
}

.search-bar button {
  padding: 0.5rem 1rem;
  border: none;
  background: #1e3a8a;
  color: #fff;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.search-bar button:hover {
  background: #163172;
}

/* Table Styles */
.table-container {
  overflow-x: auto;
}

table {
  width: 100%;
  border-collapse: collapse;
  background: #fff;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 2rem;
}

table th,
table td {
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid #f1f1f1;
}

table thead {
  background: #1e3a8a;
  color: #fff;
}

table tr:nth-child(even) {
  background: #f9f9fb;
}

//src/styles/bookings.css
.bookings-container {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    margin-top: 2rem;
    justify-content: center;
  }
  
  .boarding-pass {
    width: 350px;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    font-family: 'Roboto', sans-serif;
    position: relative;
  }
  
  .bp-header {
    display: flex;
    align-items: center;
    gap: 10px;
    background-color: #1e3a8a;
    padding: 0.75rem 1rem;
    color: #fff;
  }
  
  .bp-logo {
    height: 40px;
    width: auto;
  }
  
  .bp-header h2 {
    font-size: 1.2rem;
    margin: 0;
    text-transform: uppercase;
    letter-spacing: 1px;
  }
  
  .bp-details {
    padding: 1rem;
    color: #333;
  }
  
  .bp-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }
  
  .bp-row .label {
    font-weight: 600;
    color: #555;
  }
  
  .bp-row .value {
    font-weight: 400;
    color: #000;
  }
  
  .bp-divider {
    border-top: 1px dashed #ccc;
    margin: 0 1rem;
  }
  
  .bp-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background-color: #f1f1f1;
  }
  
  .bp-timestamp {
    font-size: 0.75rem;
    color: #777;
  }
  
  .bp-barcode {
    height: 40px;
    width: auto;
  }
  
//src/vite-env.d.ts
/// <reference types="vite/client" />

//src/scripts/main.ts
console.log("Flight Planner Loaded");

//src/scripts/seatSelection.ts
// src/scripts/seatSelection.ts

import { fetchSeatsByFlight, getRecommendedSeat } from "../api/seatsApi";
import { getFlightById } from "../api/flightsApi";

// 1) Read flightId from query params
const urlParams = new URLSearchParams(window.location.search);
const flightId = Number(urlParams.get("flightId"));

// 2) Price info & currently selected seats
let basePrice = 0;
let selectedSeats: Set<string> = new Set();

// 3) On page load, fetch flight details + seats
document.addEventListener("DOMContentLoaded", async () => {
  if (!flightId) {
    document.getElementById("flightTitle")!.textContent = "Invalid Flight";
    return;
  }

  updateConfirmButtonState();

  try {
    // Fetch flight details
    const flight = await getFlightById(flightId);
    basePrice = flight.price;
    
    document.getElementById("flightTitle")!.textContent = `${flight.origin} → ${flight.destination}`;
    document.getElementById("flightOrigin")!.textContent = flight.origin;
    document.getElementById("flightDestination")!.textContent = flight.destination;
    document.getElementById("flightTime")!.textContent = new Date(flight.departureTime).toLocaleString("en-GB");
    document.getElementById("flightPrice")!.textContent = basePrice.toString();

    // Fetch and render seats
    const seats = await fetchSeatsByFlight(flightId);
    renderSeats(seats);
  } catch (error) {
    console.error("Error loading flight:", error);
  }
});

// 4) Render seats in rows
function renderSeats(seats: any[]) {
  const container = document.getElementById("seatContainer")!;
  container.innerHTML = "";

  // Group seats by row number
  const rows: Record<number, any[]> = {};
  seats.forEach((seat) => {
    const rowNum = parseInt(seat.seatNumber.slice(1));
    if (!rows[rowNum]) {
      rows[rowNum] = [];
    }
    rows[rowNum].push(seat);
  });

  // Sort rows by row number
  Object.keys(rows)
    .map(Number)
    .sort((a, b) => a - b)
    .forEach((rowNum) => {
      const rowSeats = rows[rowNum].sort((a, b) => a.seatNumber[0].localeCompare(b.seatNumber[0]));

      const rowDiv = document.createElement("div");
      rowDiv.className = "seat-row";

      const leftSection = document.createElement("div");
      leftSection.className = "seat-section";
      const rightSection = document.createElement("div");
      rightSection.className = "seat-section";
      const aisleDiv = document.createElement("div");
      aisleDiv.className = "aisle";

      rowSeats.forEach((seat) => {
        const seatButton = document.createElement("button");
        seatButton.textContent = seat.seatNumber;

        // Data attribute for easy lookup
        seatButton.setAttribute("data-seat-number", seat.seatNumber);

        // Class name depends on availability
        seatButton.className = seat.available ? "seat available" : "seat booked";
        seatButton.disabled = !seat.available;

        seatButton.addEventListener("click", () => toggleSeatSelection(seat.seatNumber, seatButton));

        // A/B/C go left, else right
        if (["A", "B", "C"].includes(seat.seatNumber[0])) {
          leftSection.appendChild(seatButton);
        } else {
          rightSection.appendChild(seatButton);
        }
      });

      rowDiv.appendChild(leftSection);
      rowDiv.appendChild(aisleDiv);
      rowDiv.appendChild(rightSection);
      container.appendChild(rowDiv);
    });
}

// 5) Handle seat selection
function toggleSeatSelection(seatNumber: string, button: HTMLElement) {
  // Remove the recommended blinking if it was recommended
  if (button.classList.contains("recommended")) {
    button.classList.remove("recommended");
  }

  // Toggle the "selected" state
  if (selectedSeats.has(seatNumber)) {
    selectedSeats.delete(seatNumber);
    button.classList.remove("selected");
  } else {
    selectedSeats.add(seatNumber);
    button.classList.add("selected");
  }
  updateTotalPrice();
  updateConfirmButtonState();
}

// 6) Update total price
function updateTotalPrice() {
  const totalPrice = selectedSeats.size * basePrice;
  document.getElementById("totalPrice")!.textContent = totalPrice.toString();
}

// 7) Clear old recommended seats
function clearRecommendedSeats() {
  const recommendedButtons = document.querySelectorAll("button.seat.recommended");
  recommendedButtons.forEach((btn) => btn.classList.remove("recommended"));
}

// 8) Mark seat as recommended (blinking effect, scroll into view, etc.)
function markSeatAsRecommended(seatNumber: string) {
  const seatElement = document.querySelector(
    `button.seat.available[data-seat-number="${seatNumber}"]`
  ) as HTMLElement | null;

  if (seatElement) {
    seatElement.classList.add("recommended");
    seatElement.scrollIntoView({ behavior: "smooth", block: "center" });
  } else {
    console.warn(`Recommended seat "${seatNumber}" not found in the UI`);
  }
}

document.getElementById("recommend-seat-btn")!.addEventListener("click", async () => {

  hideRecommendationError();

  try {

    clearRecommendedSeats();

    const passengerCountInput = document.getElementById("passengerCount") as HTMLSelectElement;
    const passengerCount = parseInt(passengerCountInput.value, 10) || 1;

    const windowPref = (document.getElementById("pref-window") as HTMLInputElement).checked;
    const legroomPref = (document.getElementById("pref-legroom") as HTMLInputElement).checked;
    const exitPref = (document.getElementById("pref-exit") as HTMLInputElement).checked;

    const excludedSeats = Array.from(selectedSeats).join(",");

    // Call the backend for recommended seats
    const recommendedSeats = await getRecommendedSeat({
      flightId,
      passengerCount,
      window: windowPref,
      legroom: legroomPref,
      nearExit: exitPref,
      excluded: excludedSeats,
    });

    if (recommendedSeats.length > 0) {
      recommendedSeats.forEach((seat) => markSeatAsRecommended(seat.seatNumber));
    } else {
      // Show a red banner if no seats are returned
      showRecommendationError("No seats available with selected preferences. Please try again.");
    }
  } catch (error) {
    console.error("Error recommending seats:", error);
    showRecommendationError("There was an error recommending seats. Please try again later.");
  }
});

function showRecommendationError(message: string) {
  const errorBanner = document.getElementById("recommendationError") as HTMLElement;
  errorBanner.textContent = message;
  errorBanner.classList.add("visible");

}

function hideRecommendationError() {
  const errorBanner = document.getElementById("recommendationError") as HTMLElement;
  errorBanner.classList.remove("visible");
}


// Grab references to the select and checkboxes
const passengerCountInput = document.getElementById("passengerCount") as HTMLSelectElement;
const prefWindow = document.getElementById("pref-window") as HTMLInputElement;
const prefLegroom = document.getElementById("pref-legroom") as HTMLInputElement;
const prefExit = document.getElementById("pref-exit") as HTMLInputElement;

// A helper function that toggles availability of checkboxes
function togglePreferenceCheckboxes() {
  const passengerCount = parseInt(passengerCountInput.value, 10);
  const isSingle = passengerCount === 1;
  
  // Disable (and uncheck) all preference checkboxes if > 1 passenger
  [prefWindow, prefLegroom, prefExit].forEach(checkbox => {
    checkbox.disabled = !isSingle;
    if (!isSingle) {
      checkbox.checked = false;
    }
  });
}

document.getElementById("confirm-and-buy")!.addEventListener("click", () => {
  // If no seats are selected, do nothing (button is hidden anyway)
  if (selectedSeats.size === 0) {
    return;
  }

  // Gather flight info from the DOM
  const flightTitle = document.getElementById("flightTitle")!.textContent || "";
  const flightOrigin = document.getElementById("flightOrigin")!.textContent || "";
  const flightDestination = document.getElementById("flightDestination")!.textContent || "";
  const flightTime = document.getElementById("flightTime")!.textContent || "";
  const flightPrice = document.getElementById("flightPrice")!.textContent || "0";
  const totalPrice = document.getElementById("totalPrice")!.textContent || "0";

  // Retrieve any previous bookings from sessionStorage
  const existingBookings = sessionStorage.getItem("bookings");
  let bookings: any[] = existingBookings ? JSON.parse(existingBookings) : [];

  // For each selected seat, mark it as booked in the UI and create a separate booking
  Array.from(selectedSeats).forEach((seatNumber) => {
    // Mark the seat as booked in the UI:
    const seatButton = document.querySelector(
      `button.seat.available[data-seat-number="${seatNumber}"]`
    ) as HTMLButtonElement | null;
    if (seatButton) {
      seatButton.classList.remove("available", "selected");
      seatButton.classList.add("booked");
      seatButton.disabled = true;
    }

    // Create a separate booking record for this seat
    const booking = {
      flightTitle,
      flightOrigin,
      flightDestination,
      flightTime,
      flightPrice,
      totalPrice,
      seat: seatNumber, // single seat
      timestamp: new Date().toLocaleString()
    };
    bookings.push(booking);
  });

  // Save all new bookings back to sessionStorage
  sessionStorage.setItem("bookings", JSON.stringify(bookings));

  // Clear the local selection & update the UI
  selectedSeats.clear();
  updateTotalPrice();
  updateConfirmButtonState();

  // Redirect to the bookings page
  window.location.href = "bookings.html";
});


// Get a reference to the confirm button
const confirmButton = document.getElementById("confirm-and-buy") as HTMLButtonElement;

// Called whenever seats are toggled
function updateConfirmButtonState() {
  if (selectedSeats.size === 0) {
    confirmButton.style.display = "none";
  } else {
    confirmButton.style.display = "inline-block";
  }
}

// Call it once on page load, in case the user has a default value other than 1
togglePreferenceCheckboxes();

// Also call it whenever the user changes passenger count
passengerCountInput.addEventListener("change", togglePreferenceCheckboxes);

//src/scripts/bookings.ts
document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("bookingsContainer")!;
    const bookingsJSON = sessionStorage.getItem("bookings");
  
    if (!bookingsJSON) {
      container.innerHTML = "<p>No bookings yet.</p>";
      return;
    }
  
    const bookings = JSON.parse(bookingsJSON);
    if (!bookings.length) {
      container.innerHTML = "<p>No bookings yet.</p>";
      return;
    }
  
    bookings.forEach((booking: any) => {
      // Create a “boarding pass” element with logo, details, divider, and barcode.
      const passDiv = document.createElement("div");
      passDiv.className = "boarding-pass";
  
      passDiv.innerHTML = `
      <div class="bp-header">
        <img src="/lennuki-logo.webp" alt="Plane Logo" class="bp-logo" />
        <h2>Boarding Pass</h2>
      </div>
      <div class="bp-details">
        <!-- Removed the "From" and "To" rows -->
        <div class="bp-row"><span class="label">Flight:</span><span class="value">${booking.flightTitle}</span></div>
        <div class="bp-row"><span class="label">Seat:</span><span class="value">${booking.seat}</span></div>
        <div class="bp-row"><span class="label">Departure:</span><span class="value">${booking.flightTime}</span></div>
        <div class="bp-row"><span class="label">Price:</span><span class="value">$${booking.flightPrice}</span></div>
      </div>
      <div class="bp-divider"></div>
      <div class="bp-footer">
        <span class="bp-timestamp">${booking.timestamp}</span>
        <img src="/barcode.avif" alt="Barcode" class="bp-barcode" />
      </div>
    `;
  
      container.appendChild(passDiv);
    });
  
    // “Back to Flights” button
    const backBtn = document.getElementById("backToFlights") as HTMLButtonElement;
    backBtn.addEventListener("click", () => {
      window.location.href = "flights.html";
    });
  });
  
//src/scripts/flights.ts
import { fetchFlights } from "../api/flightsApi";

interface Flight {
  id: number;
  company: string;
  origin: string;
  destination: string;
  departureTime: string;
  price: number;
  time: string;
}

let allFlights: Flight[] = [];

async function loadFlights() {
  try {
    allFlights = await fetchFlights();
    renderFlights(allFlights);
  } catch (error) {
    console.error("Error fetching flights:", error);
    const tbody = document.querySelector("#flightsTable tbody");
    if (tbody) {
      tbody.innerHTML = `<tr><td colspan="5" style="color:red;">Error loading flights. Check console.</td></tr>`;
    }
  }
}

function renderFlights(flights: Flight[]) {
  const tbody = document.querySelector("#flightsTable tbody");
  if (!tbody) return;
  tbody.innerHTML = "";

  if (flights.length === 0) {
    tbody.innerHTML = `<tr><td colspan="6">No flights available.</td></tr>`;
    return;
  }

  // **Sort flights by departureTime**
  flights.sort((a, b) => new Date(a.departureTime).getTime() - new Date(b.departureTime).getTime());

  flights.forEach(flight => {
    const departureDate = new Date(flight.departureTime);
    const formattedDate = departureDate.toLocaleDateString("en-GB").replace(/\//g, "."); // Format: DD.MM.YYYY
    const formattedTime = departureDate.toLocaleTimeString("en-GB", { hour: "2-digit", minute: "2-digit" }); // HH:MM format

    const tr = document.createElement("tr");
    tr.innerHTML = `
      <td>${flight.company}</td>
      <td>${flight.origin}</td>
      <td>${flight.destination}</td>
      <td>${formattedDate} ${formattedTime}</td> <!-- Date and Time in one cell -->
      <td>$${flight.price}</td>
      <td><a href="flight.html?flightId=${flight.id}" class="btn buy-btn">Buy Ticket</a></td>
    `;
    tbody.appendChild(tr);
  });
}





function filterFlights() {
  const originInput = (document.getElementById("origin") as HTMLInputElement).value.toLowerCase();
  const destinationInput = (document.getElementById("destination") as HTMLInputElement).value.toLowerCase();
  const dateInput = (document.getElementById("date") as HTMLInputElement).value; // Ensure this is a date input

  const filtered = allFlights.filter(flight => {
    let matches = true;
    if (originInput && !flight.origin.toLowerCase().includes(originInput)) {
      matches = false;
    }
    if (destinationInput && !flight.destination.toLowerCase().includes(destinationInput)) {
      matches = false;
    }
    if (dateInput) {
      const flightDate = new Date(flight.departureTime).toISOString().split("T")[0]; // Extract only YYYY-MM-DD
      if (flightDate !== dateInput) {
        matches = false;
      }
    }
    return matches;
  });

  renderFlights(filtered);
}

const searchInputs = document.querySelectorAll<HTMLInputElement>("#origin, #destination, #date");
searchInputs.forEach(input => {
  input.addEventListener("keypress", (event: KeyboardEvent) => { // Explicitly type as KeyboardEvent
    if (event.key === "Enter") {
      event.preventDefault(); // Prevents form submission if inside a form
      filterFlights();
    }
  });
});


document.getElementById("search-btn")?.addEventListener("click", filterFlights);

document.addEventListener("DOMContentLoaded", loadFlights);

//src/api/seatsApi.ts
// src/api/seatsApi.ts

// Use a relative path so Vite’s proxy (vite.config.ts) can handle it.
// If you want to skip the proxy, you can do: const BASE_URL = "http://localhost:8080/api/seats";
const BASE_URL = "/api/seats";

/**
 * Fetch seats for a given flight, from the endpoint:
 * GET /api/seats/flight/{flightId}
 */
export async function fetchSeatsByFlight(flightId: number) {
  // Correct path: /api/seats/flight/{flightId}
  const response = await fetch(`${BASE_URL}/flight/${flightId}`);
  if (!response.ok) {
    throw new Error(`Failed to fetch seats: ${response.status}`);
  }
  return response.json();
}

/**
 * Call the backend’s recommendation endpoint:
 * GET /api/seats/recommend?flightId=...&passengerCount=...&excluded=... etc.
 */
export async function getRecommendedSeat(options: {
  flightId: number;
  passengerCount: number;
  window: boolean;
  legroom: boolean;
  nearExit: boolean;
  excluded: string;
}): Promise<any[]> {
  const query = new URLSearchParams({
    flightId: options.flightId.toString(),
    passengerCount: options.passengerCount.toString(),
    window: options.window.toString(),
    legroom: options.legroom.toString(),
    nearExit: options.nearExit.toString(),
    excluded: options.excluded,
  });

  // Correct path: /api/seats/recommend
  const response = await fetch(`${BASE_URL}/recommend?${query.toString()}`);
  if (!response.ok) {
    throw new Error(`Failed to fetch recommended seats: ${response.status}`);
  }
  return response.json();
}

//src/api/flightsApi.ts
const API_URL = "/api/flights"; // or "http://localhost:8080/api/flights"

export async function fetchFlights() {
  const response = await fetch(API_URL);
  if (!response.ok) throw new Error(`Failed to fetch flights: ${response.status}`);
  return response.json();
}

// You can either keep the name fetchFlightById or rename it to getFlightById.
export async function getFlightById(flightId: number) {
  const response = await fetch(`${API_URL}/${flightId}`);
  if (!response.ok) throw new Error(`Failed to fetch flight with ID ${flightId}`);
  return response.json();
}

